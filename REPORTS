#include <iostream>
#include <cmath>
#include <ctime>
#include <cstdlib>


using namespace std;

double countMean(int N, int student[]){
    double sum = 0;
    double mean;
    for (int i = 0 ; i < N; i++){
    sum = sum + student[i];
    }
mean = sum / N;
cout << "The mean equals: " << mean << endl;
cout << "============================================= " << endl;

 return mean;
}


void sortAndPrintStudents(int student[], int N) {
    int sorted[N];
    int index = 0;

    for (int i = 0; i <= 10; i++) {
        for (int j = 0; j < N; j++) {
            if (student[j] == i) {
                sorted[index] = student[j];
                cout << "STUDENT NR " << j << ": " << student[j] << endl;
                index++;
            }
        }
    }

    if (N % 2 == 0){
        int upperMiddle = sorted[(N/2)-1];
        int lowerMiddle = sorted[(N/2)];
        double mediana = static_cast<double>((upperMiddle + lowerMiddle) / 2);
        cout << "Mediana equals: \n" << mediana << endl;
    }

    else {
        int mediana = sorted[(N/2)];
        cout << "Mediana equals: \n" << mediana << endl;
    }
}


void countGrades(int N, int student[]){

    int grades[11] = {0};
    for (int i = 0; i < N; i++){
        grades[student[i]]++; // Zwiększamy licznik dla danej oceny
    }

    for (int i = 0; i <= 10; i++) {
        if (grades[i] >= 0) {
            cout << "Grade " << i << " was received " << grades[i] << " times." << endl;
        }

    }
}

void highScore(int N, int student[]) {
    int grades[11] = {0};

    // Zlicz wystąpienia ocen
    for (int i = 0; i < N; i++) {
        grades[student[i]]++;
    }

    // Znajdź najczęstszą ocenę
    int max_count = 0;
    int most_common_grades[11] = {0};
    int most_common_count = 0;

    for (int i = 0; i <= 10; i++) {
        if (grades[i] > 0) {
            if (grades[i] > max_count) {
                max_count = grades[i];
                most_common_count = 0;
                most_common_grades[most_common_count++] = i;
            } else if (grades[i] == max_count) {
                most_common_grades[most_common_count++] = i;
            }
        }
    }

    // Wyświetl wyniki
    if (most_common_count > 0) {
        cout << "\nMost common grade(s): ";

        for (int i = 0; i < most_common_count; i++) {
            cout << most_common_grades[i] << "; ";
        }
        cout << "(given " << max_count << " times)\n";
    } else {
        cout << "No grades to analyze.\n";
    }
}

void drawHistogram(int N, int student[]) {
    int grades[11] = {0}; // Tablica do zliczania wystąpień ocen

    // Zliczanie wystąpień ocen
    for (int i = 0; i < N; i++) {
        grades[student[i]]++;
    }

    // Rysowanie histogramu
    cout << "\nHistogram of grades:\n";
    for (int i = 0; i <= 10; i++) {
        cout << "Grade " << i << ": ";
        for (int j = 0; j < grades[i]; j++) {
            cout << "*"; // Dodaj gwiazdkę dla każdej wystąpienia
        }
        cout << " \n"; // Wypisz liczbę wystąpień
    }
}






int main()
{
srand(time(0));
int grade = rand() % 11;
int N;

cout << "Please, enter the number of students " << endl;
cin >> N;
int student[N];
cout << "============================================= " << endl;
cout << "Please find the grades below: " << endl;
for (int i = 0; i < N; i++){
    int grade = rand() % 11;
    student[i] = grade;
    cout << "STUDENT NR " << i + 1 << ": " << student[i] << endl;
}

countMean(N, student);
cout << "\nBelow you will find sorted grades." << endl;
sortAndPrintStudents(student, N);
cout << "============================================= " << endl;
countGrades(N, student);
highScore(N, student);
cout << "============================================= " << endl;
cout << "See the results below: " << endl;
drawHistogram(N, student);
}
